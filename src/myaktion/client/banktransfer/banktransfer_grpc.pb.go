// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: banktransfer/banktransfer.proto

package banktransfer

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BankTransfer_TransferMoney_FullMethodName       = "/banktransfer.BankTransfer/TransferMoney"
	BankTransfer_ProcessTransactions_FullMethodName = "/banktransfer.BankTransfer/ProcessTransactions"
)

// BankTransferClient is the client API for BankTransfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankTransferClient interface {
	TransferMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*empty.Empty, error)
	ProcessTransactions(ctx context.Context, opts ...grpc.CallOption) (BankTransfer_ProcessTransactionsClient, error)
}

type bankTransferClient struct {
	cc grpc.ClientConnInterface
}

func NewBankTransferClient(cc grpc.ClientConnInterface) BankTransferClient {
	return &bankTransferClient{cc}
}

func (c *bankTransferClient) TransferMoney(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BankTransfer_TransferMoney_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankTransferClient) ProcessTransactions(ctx context.Context, opts ...grpc.CallOption) (BankTransfer_ProcessTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BankTransfer_ServiceDesc.Streams[0], BankTransfer_ProcessTransactions_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bankTransferProcessTransactionsClient{stream}
	return x, nil
}

type BankTransfer_ProcessTransactionsClient interface {
	Send(*ProcessingResponse) error
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type bankTransferProcessTransactionsClient struct {
	grpc.ClientStream
}

func (x *bankTransferProcessTransactionsClient) Send(m *ProcessingResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bankTransferProcessTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankTransferServer is the server API for BankTransfer service.
// All implementations must embed UnimplementedBankTransferServer
// for forward compatibility
type BankTransferServer interface {
	TransferMoney(context.Context, *Transaction) (*empty.Empty, error)
	ProcessTransactions(BankTransfer_ProcessTransactionsServer) error
	mustEmbedUnimplementedBankTransferServer()
}

// UnimplementedBankTransferServer must be embedded to have forward compatible implementations.
type UnimplementedBankTransferServer struct {
}

func (UnimplementedBankTransferServer) TransferMoney(context.Context, *Transaction) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferMoney not implemented")
}
func (UnimplementedBankTransferServer) ProcessTransactions(BankTransfer_ProcessTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessTransactions not implemented")
}
func (UnimplementedBankTransferServer) mustEmbedUnimplementedBankTransferServer() {}

// UnsafeBankTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankTransferServer will
// result in compilation errors.
type UnsafeBankTransferServer interface {
	mustEmbedUnimplementedBankTransferServer()
}

func RegisterBankTransferServer(s grpc.ServiceRegistrar, srv BankTransferServer) {
	s.RegisterService(&BankTransfer_ServiceDesc, srv)
}

func _BankTransfer_TransferMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankTransferServer).TransferMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankTransfer_TransferMoney_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankTransferServer).TransferMoney(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankTransfer_ProcessTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BankTransferServer).ProcessTransactions(&bankTransferProcessTransactionsServer{stream})
}

type BankTransfer_ProcessTransactionsServer interface {
	Send(*Transaction) error
	Recv() (*ProcessingResponse, error)
	grpc.ServerStream
}

type bankTransferProcessTransactionsServer struct {
	grpc.ServerStream
}

func (x *bankTransferProcessTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bankTransferProcessTransactionsServer) Recv() (*ProcessingResponse, error) {
	m := new(ProcessingResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BankTransfer_ServiceDesc is the grpc.ServiceDesc for BankTransfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankTransfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banktransfer.BankTransfer",
	HandlerType: (*BankTransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferMoney",
			Handler:    _BankTransfer_TransferMoney_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessTransactions",
			Handler:       _BankTransfer_ProcessTransactions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "banktransfer/banktransfer.proto",
}
